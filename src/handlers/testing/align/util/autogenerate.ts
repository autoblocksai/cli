import fs from 'fs/promises';
import {
  Language,
  type AutogeneratedEvaluator,
  type AutogeneratedEvaluatorWithFilepath,
} from './models';

export async function writeEvaluatorTemplates(args: {
  language: Language;
  runTestSuiteCalledFromDirectory: string;
  evaluators: Omit<AutogeneratedEvaluator, 'filepath'>[];
}): Promise<AutogeneratedEvaluatorWithFilepath[]> {
  await ensureEvaluatorsDirectoryExists({
    language: args.language,
    runTestSuiteCalledFromDirectory: args.runTestSuiteCalledFromDirectory,
  });

  return Promise.all(
    args.evaluators.map(async (evaluator) => {
      const { filepath } = await writeTemplate({
        language: args.language,
        evaluatorId: evaluator.id,
        evaluatorDescription: evaluator.description,
        runTestSuiteCalledFromDirectory: args.runTestSuiteCalledFromDirectory,
      });

      return {
        id: evaluator.id,
        description: evaluator.description,
        filepath,
      };
    }),
  );
}

const PYTHON_TEMPLATE = `from autoblocks.testing.models import BaseTestEvaluator
from autoblocks.testing.models import Evaluation


class {{ evaluatorClassName }}(BaseTestEvaluator):
    id = "{{ evaluatorId }}"

    def evaluate_test_case(self, test_case: YourTestCaseType, output: YourOutputType) -> Evaluation:
        """
        {{ evaluatorDescription }}
        """
        # Implement your evaluation logic here
`;

const TYPESCRIPT_TEMPLATE = `import { BaseTestEvaluator, Evaluation } from '@autoblocks/client/testing';

export class {{ evaluatorClassName }} extends BaseTestEvaluator<YourTestCaseType, YourOutputType> {
  id = '{{ evaluatorId }}';

  /**
   * {{ evaluatorDescription }}
   */
  evaluateTestCase(args: { testCase: YourTestCaseType; output: YourOutputType }): Evaluation {
    // Implement your evaluation logic here
  }
}
`;

const TEMPLATES: Record<Language, string> = {
  [Language.PYTHON]: PYTHON_TEMPLATE,
  [Language.TYPESCRIPT]: TYPESCRIPT_TEMPLATE,
} as const;

const EVALUATORS_DIRECTORY = 'evaluators';
const INIT_PY = '__init__.py';

async function ensureEvaluatorsDirectoryExists(args: {
  language: Language;
  runTestSuiteCalledFromDirectory: string;
}): Promise<void> {
  const evaluatorsDirectory = `${args.runTestSuiteCalledFromDirectory}/${EVALUATORS_DIRECTORY}`;
  await fs.mkdir(evaluatorsDirectory, { recursive: true });

  // Ensure __init__.py exists for Python
  if (args.language === Language.PYTHON) {
    try {
      await fs.access(`${evaluatorsDirectory}/${INIT_PY}`);
    } catch {
      await fs.writeFile(`${evaluatorsDirectory}/${INIT_PY}`, '');
    }
  }
}

function renderTemplate(args: {
  language: Language;
  evaluatorId: string;
  evaluatorClassName: string;
  evaluatorDescription: string;
}): string {
  const template = TEMPLATES[args.language];
  return template
    .replace(/{{ evaluatorId }}/g, args.evaluatorId)
    .replace(/{{ evaluatorClassName }}/g, args.evaluatorClassName)
    .replace(/{{ evaluatorDescription }}/g, args.evaluatorDescription);
}

function makeClassName(args: { evaluatorId: string }): string {
  return args.evaluatorId
    .toLowerCase()
    .split('-')
    .map((word) => word[0].toUpperCase() + word.slice(1))
    .join('');
}

function makeFilename(args: {
  language: Language;
  evaluatorId: string;
}): string {
  switch (args.language) {
    case Language.PYTHON:
      return args.evaluatorId.replace(/-/g, '_') + '.py';
    case Language.TYPESCRIPT:
      return args.evaluatorId + '.ts';
  }
}

async function writeTemplate(args: {
  language: Language;
  runTestSuiteCalledFromDirectory: string;
  evaluatorId: string;
  evaluatorDescription: string;
}): Promise<{ filepath: string }> {
  const content = renderTemplate({
    language: args.language,
    evaluatorId: args.evaluatorId,
    evaluatorClassName: makeClassName({ evaluatorId: args.evaluatorId }),
    evaluatorDescription: args.evaluatorDescription,
  });
  const filename = makeFilename({
    language: args.language,
    evaluatorId: args.evaluatorId,
  });
  const filepath = `${args.runTestSuiteCalledFromDirectory}/${EVALUATORS_DIRECTORY}/${filename}`;
  // Don't overwrite file if it already exists
  try {
    // TODO check if content is the same, notify user, etc
    await fs.access(filepath);
    return { filepath };
  } catch {
    // Continue to write the file
  }
  await fs.writeFile(filepath, content);
  return { filepath };
}
